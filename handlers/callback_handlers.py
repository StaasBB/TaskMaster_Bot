# handlers/callback_handlers.py
import pytz
from datetime import datetime
import re
from telebot import types, apihelper

class CallbackHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–Ω–æ—Å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á.
    –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –º–µ—Ç–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:
      - handle_task_action
      - complete_task
      - delete_task
      - process_reschedule_deadline
      - process_edit_title
      - process_edit_description
      - process_edit_priority
      - process_edit_category
      - process_edit_tags
      - process_edit_deadline
    """

    def __init__(self, bot, db, parser, formatter, ui):
        """
        :param bot: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.TeleBot
        :param db: —ç–∫–∑–µ–º–ø–ª—è—Ä Database
        :param parser: —ç–∫–∑–µ–º–ø–ª—è—Ä DeadlineParser
        :param formatter: —ç–∫–∑–µ–º–ø–ª—è—Ä TaskFormatter
        :param ui: —ç–∫–∑–µ–º–ø–ª—è—Ä BotUI
        """
        self.bot = bot
        self.db = db
        self.parser = parser
        self.formatter = formatter
        self.ui = ui

    def handle_task_action(self, call):
        """
        –õ–æ–≤–∏—Ç –∫–ª–∏–∫ –ø–æ inline-–∫–Ω–æ–ø–∫–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–¥–∞ action_taskId.
        –†–∞–∑–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥.
        """
        action, task_id_str = call.data.split('_', 1)
        try:
            task_id = int(task_id_str)
        except ValueError:
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞
        self.bot.answer_callback_query(call.id)

        if action == 'complete':
            return self.complete_task(call, task_id)

        if action == 'delete':
            return self.delete_task(call, task_id)

        if action == 'reschedule':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω –∏–∑ –ë–î
            conn = self.db.get_db_connection()
            cur = conn.cursor()
            try:
                cur.execute("SELECT deadline FROM tasks WHERE task_id = %s", (task_id,))
                row = cur.fetchone()
            except Exception as e:
                cur.close()
                conn.close()
                self.bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                return self.ui.show_main_menu(call.message.chat.id)
            cur.close()
            conn.close()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
            if not row or not row[0]:
                self.bot.send_message(call.message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏: –¥–µ–¥–ª–∞–π–Ω –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return self.ui.show_main_menu(call.message.chat.id)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è –ø–æ–∫–∞–∑–∞
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ parser.timezone = –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∑–æ–Ω–∞
            dl_utc = row[0]
            try:
                moscow = self.parser.timezone
            except AttributeError:
                # –ï—Å–ª–∏ parser –Ω–µ —Ö—Ä–∞–Ω–∏—Ç timezone, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å formatter –∏–ª–∏ config
                moscow = pytz.timezone('Europe/Moscow')
            dl_local = dl_utc.astimezone(moscow)
            formatted_dl = dl_local.strftime('%d.%m.%Y %H:%M')

            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω
            msg = self.bot.send_message(
                call.message.chat.id,
                (
                    f"üîÑ *–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á–∏ {task_id}*\n"
                    f"–¢–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω: `{formatted_dl}`\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä '—Å–µ–≥–æ–¥–Ω—è –≤ 9:00', '–∑–∞–≤—Ç—Ä–∞ 18:00', '31.12.2025 14:30'):"
                ),
                parse_mode='Markdown'
            )
            self.bot.register_next_step_handler(
                msg, self.process_reschedule_deadline, {'task_id': task_id}
            )
            return

        if action == 'edit':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—è –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            conn = self.db.get_db_connection()
            cur = conn.cursor()
            try:
                cur.execute("""
                    SELECT title, description, priority, category, tags, deadline
                    FROM tasks
                    WHERE task_id = %s
                """, (task_id,))
                row = cur.fetchone()
            except Exception as e:
                cur.close()
                conn.close()
                self.bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                return self.ui.show_main_menu(call.message.chat.id)
            cur.close()
            conn.close()

            if not row:
                self.bot.send_message(call.message.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return self.ui.show_main_menu(call.message.chat.id)

            title, description, priority, category, tags, deadline = row

            # –®–∞–≥ 1: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            msg = self.bot.send_message(
                call.message.chat.id,
                (
                    f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}*\n\n"
                    "1Ô∏è‚É£ –¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:\n"
                    f"`{title or '‚Äî'}`\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π:"
                ),
                parse_mode='Markdown'
            )
            data = {
                'task_id': task_id,
                'old': {
                    'title': title,
                    'description': description,
                    'priority': priority,
                    'category': category,
                    'tags': tags,
                    'deadline': deadline
                },
                'new': {}
            }
            self.bot.register_next_step_handler(msg, self.process_edit_title, data)
            return

        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        self.ui.show_main_menu(call.message.chat.id)

    def complete_task(self, call, task_id):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞—á—É: –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        –ø—Ä–∏ 'message is not modified'.
        """
        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute(
                "UPDATE tasks SET status = 'completed', updated_at = NOW() WHERE task_id = %s RETURNING *",
                (task_id,)
            )
            updated_task = cur.fetchone()
            if not updated_task:
                # –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —é–∑–µ—Ä–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ —á–µ—Ä–µ–∑ answer_callback_query
                self.bot.answer_callback_query(call.id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            conn.commit()
            columns = [desc[0] for desc in cur.description]
            task_dict = dict(zip(columns, updated_task))

            formatted = self.formatter.format_task(task_dict)

            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
            try:
                # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
                self.bot.answer_callback_query(call.id)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass

            # –ü—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n{formatted}",
                    parse_mode='Markdown'
                )
                self.bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=None
                )
            except apihelper.ApiException as e:
                err_text = str(e)
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "message is not modified", –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if 'message is not modified' in err_text.lower():
                    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º: —Ç–µ–∫—Å—Ç —É–∂–µ —Ç–∞–∫–æ–π –∂–µ
                    pass
                else:
                    # –í –∏–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —é–∑–µ—Ä —É–¥–∞–ª–∏–ª –±–æ—Ç–∞ –∏ —Ç.–ø.)
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.bot.send_message(
                        call.message.chat.id,
                        f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n{formatted}",
                        parse_mode='Markdown'
                    )
            except Exception:
                # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.send_message(
                    call.message.chat.id,
                    f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n{formatted}",
                    parse_mode='Markdown'
                )


        except Exception as e:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î
            conn.rollback()
            # –ï—Å–ª–∏ callback –µ—â—ë –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º —Å —Ç–µ–∫—Å—Ç–æ–º –æ–± –æ—à–∏–±–∫–µ
            try:
                self.bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
            except Exception:
                pass
        finally:
            cur.close()
            conn.close()
    def delete_task(self, call, task_id):
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ë–î –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.
        """
        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute("DELETE FROM tasks WHERE task_id = %s RETURNING title", (task_id,))
            deleted = cur.fetchone()
            if deleted:
                conn.commit()
                title = deleted[0]
                try:
                    self.bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=f"üóë –ó–∞–¥–∞—á–∞ '{title}' —É–¥–∞–ª–µ–Ω–∞",
                        reply_markup=None
                    )
                except Exception:
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.bot.send_message(call.message.chat.id, f"üóë –ó–∞–¥–∞—á–∞ '{title}' —É–¥–∞–ª–µ–Ω–∞")
            else:
                self.bot.answer_callback_query(call.id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            conn.rollback()
            self.bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        finally:
            cur.close()
            conn.close()

    def process_reschedule_deadline(self, message, user_data):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏.
        user_data: {'task_id': int}
        """
        task_id = user_data.get('task_id')
        chat_id = message.chat.id
        text = message.text.strip()
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω
        try:
            new_deadline = self.parser.parse_deadline(text)
        except ValueError as e:
            msg = self.bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Å–µ–≥–æ–¥–Ω—è –≤ 9:00', '–∑–∞–≤—Ç—Ä–∞ 18:00' –∏–ª–∏ '31.12.2025 14:30':"
            )
            self.bot.register_next_step_handler(msg, self.process_reschedule_deadline, user_data)
            return

        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute(
                "UPDATE tasks SET deadline = %s, updated_at = NOW() WHERE task_id = %s RETURNING *",
                (new_deadline, task_id)
            )
            row = cur.fetchone()
            if not row:
                self.bot.send_message(chat_id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                conn.commit()
                columns = [desc[0] for desc in cur.description]
                task = dict(zip(columns, row))
                formatted = self.formatter.format_task(task)
                markup = self.ui.create_task_actions_markup(task_id)
                self.bot.send_message(
                    chat_id,
                    f"üîÑ *–î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!*\n\n{formatted}",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
        except Exception as e:
            conn.rollback()
            self.bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω: {e}")
        finally:
            cur.close()
            conn.close()
        self.ui.show_main_menu(chat_id)

    def process_edit_title(self, message, data):
        """
        –≠—Ç–∞–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
        data: {'task_id': int, 'old': {...}, 'new': {...}}
        """
        text = message.text.strip()
        data['new']['title'] = data['old']['title'] if text == '/skip' or not text else text

        # –®–∞–≥ 2: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        old_desc = data['old'].get('description') or ''
        msg = self.bot.send_message(
            message.chat.id,
            (
                "2Ô∏è‚É£ –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n"
                f"`{old_desc or '‚Äî'}`\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ /skip:"
            ),
            parse_mode='Markdown'
        )
        self.bot.register_next_step_handler(msg, self.process_edit_description, data)

    def process_edit_description(self, message, data):
        """
        –≠—Ç–∞–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
        """
        text = message.text.strip()
        data['new']['description'] = data['old'].get('description') if text == '/skip' else text

        # –®–∞–≥ 3: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üî¥ –í—ã—Å–æ–∫–∏–π', 'üü° –°—Ä–µ–¥–Ω–∏–π', 'üü¢ –ù–∏–∑–∫–∏–π')
        old_pr = data['old'].get('priority')
        emoji = self.formatter.get_priority_emoji(old_pr)
        msg = self.bot.send_message(
            message.chat.id,
            f"3Ô∏è‚É£ –¢–µ–∫—É—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {emoji}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–ª–∏ /skip:",
            reply_markup=markup
        )
        self.bot.register_next_step_handler(msg, self.process_edit_priority, data)

    def process_edit_priority(self, message, data):
        """
        –≠—Ç–∞–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
        """
        pm = {'üî¥ –í—ã—Å–æ–∫–∏–π': 'high', 'üü° –°—Ä–µ–¥–Ω–∏–π': 'medium', 'üü¢ –ù–∏–∑–∫–∏–π': 'low'}
        text = message.text.strip()
        data['new']['priority'] = data['old'].get('priority') if text == '/skip' else pm.get(text, data['old'].get('priority'))

        # –®–∞–≥ 4: –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        old_cat = data['old'].get('category') or ''
        msg = self.bot.send_message(
            message.chat.id,
            f"4Ô∏è‚É£ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: `{old_cat or '‚Äî'}`\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–ª–∏ /skip:",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )
        self.bot.register_next_step_handler(msg, self.process_edit_category, data)

    def process_edit_category(self, message, data):
        """
        –≠—Ç–∞–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.
        """
        text = message.text.strip()
        data['new']['category'] = data['old'].get('category') if text == '/skip' else text

        # –®–∞–≥ 5: —Ç–µ–≥–∏
        old_tags_list = data['old'].get('tags') or []
        old_tags = ', '.join(old_tags_list) if old_tags_list else ''
        msg = self.bot.send_message(
            message.chat.id,
            (
                "5Ô∏è‚É£ –¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏:\n"
                f"`{old_tags or '‚Äî'}`\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ /skip:"
            ),
            parse_mode='Markdown'
        )
        self.bot.register_next_step_handler(msg, self.process_edit_tags, data)

    def process_edit_tags(self, message, data):
        """
        –≠—Ç–∞–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–æ–≤—ã–µ —Ç–µ–≥–∏.
        """
        text = message.text.strip()
        if text == '/skip':
            data['new']['tags'] = data['old'].get('tags')
        else:
            data['new']['tags'] = [t.strip() for t in text.split(',') if t.strip()]

        # –®–∞–≥ 6: –¥–µ–¥–ª–∞–π–Ω
        old_dl = data['old'].get('deadline')
        if old_dl:
            try:
                moscow = self.parser.timezone
            except AttributeError:
                moscow = pytz.timezone('Europe/Moscow')
            old_str = old_dl.astimezone(moscow).strftime('%d.%m.%Y %H:%M')
        else:
            old_str = ''
        msg = self.bot.send_message(
            message.chat.id,
            (
                "6Ô∏è‚É£ –¢–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω:\n"
                f"`{old_str or '‚Äî'}`\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∏–ª–∏ /skip:"
            ),
            parse_mode='Markdown'
        )
        self.bot.register_next_step_handler(msg, self.process_edit_deadline, data)

    def process_edit_deadline(self, message, data):
        """
        –≠—Ç–∞–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π.
        """
        task_id = data.get('task_id')
        text = message.text.strip()
        if text == '/skip':
            new_dl = data['old'].get('deadline')
        else:
            try:
                new_dl = self.parser.parse_deadline(text)
            except ValueError as e:
                msg = self.bot.send_message(
                    message.chat.id,
                    f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /skip:"
                )
                self.bot.register_next_step_handler(msg, self.process_edit_deadline, data)
                return
        data['new']['deadline'] = new_dl

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute(
                """
                UPDATE tasks
                   SET title       = %s,
                       description = %s,
                       priority    = %s,
                       category    = %s,
                       tags        = %s,
                       deadline    = %s,
                       updated_at  = NOW()
                 WHERE task_id = %s
                 RETURNING *
                """,
                (
                    data['new'].get('title'),
                    data['new'].get('description'),
                    data['new'].get('priority'),
                    data['new'].get('category'),
                    data['new'].get('tags'),
                    data['new'].get('deadline'),
                    task_id
                )
            )
            row = cur.fetchone()
            if row:
                conn.commit()
                columns = [desc[0] for desc in cur.description]
                task = dict(zip(columns, row))
                formatted = self.formatter.format_task(task)
                markup = self.ui.create_task_actions_markup(task_id)
                self.bot.send_message(
                    message.chat.id,
                    "‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" + formatted,
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
            else:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        except Exception as e:
            conn.rollback()
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        finally:
            cur.close()
            conn.close()

        self.ui.show_main_menu(message.chat.id)
