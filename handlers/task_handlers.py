# handlers/task_handlers.py

import re
from telebot import types

class TaskHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —ç—Ç–∞–ø–æ–≤ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á.
    –ò–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π:
      - send_welcome
      - new_task
      - process_task_title
      - process_task_description
      - process_task_priority
      - process_task_category
      - process_task_tags
      - process_task_deadline
      - show_tasks
      - process_task_filter
      - show_tasks_by_category
      - show_tasks_by_tag
    """

    def __init__(self, bot, db, parser, formatter, ui):
        """
        :param bot: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.TeleBot
        :param db: —ç–∫–∑–µ–º–ø–ª—è—Ä Database
        :param parser: —ç–∫–∑–µ–º–ø–ª—è—Ä DeadlineParser
        :param formatter: —ç–∫–∑–µ–º–ø–ª—è—Ä TaskFormatter
        :param ui: —ç–∫–∑–µ–º–ø–ª—è—Ä BotUI
        """
        self.bot = bot
        self.db = db
        self.parser = parser
        self.formatter = formatter
        self.ui = ui

    def send_welcome(self, message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç.
        """
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute(
                "INSERT INTO users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING",
                (message.from_user.id, message.from_user.username)
            )
            conn.commit()
        except Exception as e:
            conn.rollback()
            print(f"Error registering user: {e}")
        finally:
            cur.close()
            conn.close()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.ui.show_main_menu(message.chat.id)
        self.bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø TaskMaster Bot - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/newtask - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
            "/mytasks - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )

    def new_task(self, message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /newtask: –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.
        """
        msg = self.bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: process_task_title
        self.bot.register_next_step_handler(msg, self.process_task_title)

    def process_task_title(self, message):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ.
        """
        chat_id = message.chat.id
        title = message.text.strip()
        user_data = {
            'title': title,
            'user_id': message.from_user.id
        }
        msg = self.bot.send_message(
            chat_id,
            "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        self.bot.register_next_step_handler(msg, self.process_task_description, user_data)

    def process_task_description(self, message, user_data):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
        """
        if message.text != '/skip':
            user_data['description'] = message.text.strip()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton('üî¥ –í—ã—Å–æ–∫–∏–π'),
            types.KeyboardButton('üü° –°—Ä–µ–¥–Ω–∏–π'),
            types.KeyboardButton('üü¢ –ù–∏–∑–∫–∏–π')
        )
        msg = self.bot.send_message(
            message.chat.id,
            "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
            reply_markup=markup
        )
        self.bot.register_next_step_handler(msg, self.process_task_priority, user_data)

    def process_task_priority(self, message, user_data):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
        """
        priority_map = {
            'üî¥ –í—ã—Å–æ–∫–∏–π': 'high',
            'üü° –°—Ä–µ–¥–Ω–∏–π': 'medium',
            'üü¢ –ù–∏–∑–∫–∏–π': 'low'
        }
        user_data['priority'] = priority_map.get(message.text, 'medium')
        msg = self.bot.send_message(
            message.chat.id,
            "üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–∞–±–æ—Ç–∞, –£—á–µ–±–∞, –î–æ–º) –∏–ª–∏ /skip:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        self.bot.register_next_step_handler(msg, self.process_task_category, user_data)

    def process_task_category(self, message, user_data):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–≥–∏.
        """
        if message.text != '/skip':
            user_data['category'] = message.text.strip()
        msg = self.bot.send_message(
            message.chat.id,
            "üè∑ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–∞–∂–Ω–æ–µ, –ø—Ä–æ–µ–∫—Ç1) –∏–ª–∏ /skip:"
        )
        self.bot.register_next_step_handler(msg, self.process_task_tags, user_data)

    def process_task_tags(self, message, user_data):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–≥–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω.
        """
        if message.text != '/skip':
            tags = [tag.strip() for tag in message.text.split(',') if tag.strip()]
            user_data['tags'] = tags
        msg = self.bot.send_message(
            message.chat.id,
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–µ–≥–æ–¥–Ω—è –≤ 9:00', '—á–µ—Ä–µ–∑ 2 –¥–Ω—è', "
            "'–∑–∞–≤—Ç—Ä–∞ 18:00', '31.12.2023 23:59') –∏–ª–∏ /skip:"
        )
        self.bot.register_next_step_handler(msg, self.process_task_deadline, user_data)

    def process_task_deadline(self, message, user_data):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ë–î, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        chat_id = message.chat.id
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
        if message.text != '/skip':
            try:
                deadline = self.parser.parse_deadline(message.text)
                user_data['deadline'] = deadline
            except ValueError as e:
                self.bot.send_message(
                    chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
                msg = self.bot.send_message(
                    chat_id,
                    "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–µ–≥–æ–¥–Ω—è –≤ 9:00', "
                    "'—á–µ—Ä–µ–∑ 2 –¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞ 18:00', '31.12.2023 23:59') –∏–ª–∏ /skip:"
                )
                self.bot.register_next_step_handler(msg, self.process_task_deadline, user_data)
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            # 1) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
            cur.execute(
                "INSERT INTO users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING",
                (message.from_user.id, message.from_user.username)
            )
            # 2) –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            cur.execute(
                """
                INSERT INTO tasks
                    (user_id, title, description, priority, category, tags, deadline, status)
                VALUES
                    (%s, %s, %s, %s, %s, %s, %s, 'active')
                RETURNING task_id
                """,
                (
                    user_data['user_id'],
                    user_data['title'],
                    user_data.get('description'),
                    user_data.get('priority', 'medium'),
                    user_data.get('category'),
                    user_data.get('tags'),
                    user_data.get('deadline')
                )
            )
            task_id = cur.fetchone()[0]

            # 3) –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            cur.execute("SELECT * FROM tasks WHERE task_id = %s", (task_id,))
            record = cur.fetchone()
            columns = [desc[0] for desc in cur.description]
            task = dict(zip(columns, record))
            conn.commit()

            # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            formatted = self.formatter.format_task(task)
            markup = self.ui.create_task_actions_markup(task_id)
            self.bot.send_message(
                chat_id,
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n{formatted}",
                reply_markup=markup,
                parse_mode='Markdown'
            )
            self.ui.show_main_menu(chat_id)

        except Exception as e:
            conn.rollback()
            self.bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}"
            )
            self.ui.show_main_menu(chat_id)
        finally:
            cur.close()
            conn.close()

    def show_tasks(self, message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /mytasks: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute(
                "INSERT INTO users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING",
                (user_id, message.from_user.username)
            )
            conn.commit()
        except Exception as e:
            conn.rollback()
            print(f"Error registering user from /mytasks: {e}")
        finally:
            cur.close()
            conn.close()

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        markup.add(
            'üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            'üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            'üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            'üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã',
            '‚ùóÔ∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ',
            '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ',
            'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'üè∑ –¢–µ–≥–∏',
            'üìã –í—Å–µ –∑–∞–¥–∞—á–∏'
        )
        msg = self.bot.send_message(
            chat_id,
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á:",
            reply_markup=markup
        )
        self.bot.register_next_step_handler(msg, self.process_task_filter)

    def process_task_filter(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id

        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            text = message.text

            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            if text == 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏':
                cur.execute(
                    "SELECT DISTINCT category FROM tasks WHERE user_id=%s AND category IS NOT NULL",
                    (user_id,)
                )
                cats = [row[0] for row in cur.fetchall() if row[0]]
                if cats:
                    self.bot.send_message(
                        chat_id,
                        "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:\n" + "\n".join(cats)
                    )
                    self.bot.register_next_step_handler(message, self.show_tasks_by_category)
                else:
                    self.bot.send_message(chat_id, "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
                    self.ui.show_main_menu(chat_id)
                return

            # –¢–µ–≥–∏
            if text == 'üè∑ –¢–µ–≥–∏':
                cur.execute(
                    "SELECT unnest(tags) FROM tasks WHERE user_id=%s",
                    (user_id,)
                )
                tags = sorted({row[0] for row in cur.fetchall() if row[0]})
                if tags:
                    self.bot.send_message(
                        chat_id,
                        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞:\n" + "\n".join(tags)
                    )
                    self.bot.register_next_step_handler(message, self.show_tasks_by_tag)
                else:
                    self.bot.send_message(chat_id, "–ù–µ—Ç —Ç–µ–≥–æ–≤.")
                    self.ui.show_main_menu(chat_id)
                return

            # –ü—Ä–æ—á–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
            query = "SELECT * FROM tasks WHERE user_id = %s"
            params = [user_id]

            if text == 'üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç':
                query += " AND priority = 'high' AND status = 'active'"
            elif text == 'üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç':
                query += " AND priority = 'medium' AND status = 'active'"
            elif text == 'üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç':
                query += " AND priority = 'low' AND status = 'active'"
            elif text == 'üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã':
                query += " AND deadline > NOW() AND status = 'active'"
            elif text == '‚ùóÔ∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ':
                query += " AND deadline < NOW() AND status = 'active'"
            elif text == '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ':
                query += " AND status = 'completed'"
            else:
                # 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏' –∏–ª–∏ –∏–Ω–æ–π —Ç–µ–∫—Å—Ç
                query += " AND status = 'active'"

            query += """
                ORDER BY
                  CASE priority
                    WHEN 'high' THEN 1
                    WHEN 'medium' THEN 2
                    WHEN 'low' THEN 3
                  END,
                  deadline ASC
            """
            cur.execute(query, params)
            rows = cur.fetchall()

            if not rows:
                self.bot.send_message(chat_id, "üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
            else:
                for r in rows:
                    task = dict(zip([d[0] for d in cur.description], r))
                    formatted = self.formatter.format_task(task)
                    markup = self.ui.create_task_actions_markup(task['task_id'])
                    self.bot.send_message(
                        chat_id,
                        formatted,
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )

            self.ui.show_main_menu(chat_id)
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: {e}")
            self.ui.show_main_menu(chat_id)
        finally:
            cur.close()
            conn.close()

    def show_tasks_by_category(self, message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id
        cat = message.text.strip()

        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute(
                """
                SELECT *
                FROM tasks
                WHERE user_id = %s AND category = %s
                ORDER BY
                  CASE priority
                    WHEN 'high' THEN 1
                    WHEN 'medium' THEN 2
                    WHEN 'low' THEN 3
                  END,
                  deadline ASC
                """,
                (user_id, cat)
            )
            rows = cur.fetchall()

            if not rows:
                self.bot.send_message(chat_id, "üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            else:
                for r in rows:
                    task = dict(zip([d[0] for d in cur.description], r))
                    formatted = self.formatter.format_task(task)
                    markup = self.ui.create_task_actions_markup(task['task_id'])
                    self.bot.send_message(
                        chat_id,
                        formatted,
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            cur.close()
            conn.close()

        self.ui.show_main_menu(chat_id)

    def show_tasks_by_tag(self, message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–≥–∞: –≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id
        tag = message.text.strip().lstrip('#')

        conn = self.db.get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute(
                """
                SELECT *
                FROM tasks
                WHERE user_id = %s AND %s = ANY(tags)
                ORDER BY
                  CASE priority
                    WHEN 'high' THEN 1
                    WHEN 'medium' THEN 2
                    WHEN 'low' THEN 3
                  END,
                  deadline ASC
                """,
                (user_id, tag)
            )
            rows = cur.fetchall()

            if not rows:
                self.bot.send_message(chat_id, "üì≠ –ù–µ—Ç –∑–∞–¥–∞—á —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º.")
            else:
                for r in rows:
                    task = dict(zip([d[0] for d in cur.description], r))
                    formatted = self.formatter.format_task(task)
                    markup = self.ui.create_task_actions_markup(task['task_id'])
                    self.bot.send_message(
                        chat_id,
                        formatted,
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            cur.close()
            conn.close()

        self.ui.show_main_menu(chat_id)
